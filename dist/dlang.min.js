const fs=require("fs");class DLang{constructor(e){this.lines=e.split("\n")}noHandler(){}run(){let e=this.lines,l=!1,n=!1,r={};for(let t=0;t<e.length;t++){if("import 'dl:main/base.dlang'"===e[t]&&(l=!0),"import 'dl:main/database.dlang'"===e[t]&&(n=!0),e[t].includes("(")){let i,s=e[t].split("(")[0],a=e[t].replace("(","").replace(")","").replace(s,"");i=a.includes("'")?a.replace(/\'/g,""):r[a];let o="createUnsafeDB"===s&&!0===n,c="createDocument"===s&&!0===n;if("print"===s&&!0===l)void 0===i?console.error(`${a} is not defined.`):console.log(i);else if(o){let e=[" ","+","=","-","!","@","#","$","%","^","&","*","(",")","{","[","]","}","|","\\",'"',"'",";",":","?","/",".",">","<",","];const l=l=>{let n=!1;for(let r=0;r<e.length;r++)if(l.includes(e[r])){n=!0;break}return n};if(l(i))throw TypeError("Unallowed letter in the given file name.");fs.writeFile(`unsafeDb/${i}.json`,"{}",(e=>{if(e)throw e}))}if(c){let e,l=i.split(", ");r[l[0]]?l[0]=r[l[0]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${l[0]}.json`))}catch(e){console.error(e)}e[l[1]]={},fs.writeFileSync(`unsafeDb/${l[0]}.json`,JSON.stringify(e))}}if(e[t].includes("var",0)){let l=e[t].replace("var","").replace("=","").trim().split("'");r[l[0].trim()]=l[1]}e[t].includes("//",0)&&this.noHandler()}}}module.exports=DLang;
