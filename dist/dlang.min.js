const fs=require("fs"),createId=e=>btoa(e);class DLang{constructor(e){this.lines=e.split("\n")}noHandler(){}dbGetDocUnsafeConditionRunner_(e,n,r){let s,t=e;n[t[0]]?t[0]=n[t[0]]:this.noHandler(),n[t[1]]?t[1]=n[t[1]]:this.noHandler();try{s=JSON.parse(fs.readFileSync(`unsafeDb/${t[0]}.json`))[t[1]]}catch(e){console.error(e)}if(r)return s}dbGetDbUnsafeConditionRunner_(e,n,r){let s,t=e;n[t[0]]?t[0]=n[t[0]]:this.noHandler();try{s=JSON.parse(fs.readFileSync(`unsafeDb/${t[0]}.json`))}catch(e){console.error(e)}if(r)return s}dbGetPropUnsafeConditionRunner_(e,n,r){let s,t=e;n[t[0]]?t[0]=n[t[0]]:this.noHandler(),n[t[1]]?t[1]=n[t[1]]:this.noHandler(),n[t[2]]?t[2]=n[t[2]]:this.noHandler();try{s=JSON.parse(fs.readFileSync(`unsafeDb/${t[0]}.json`))[t[1]][t[2]]}catch(e){console.error(e)}if(r)return s}run(){let e=this.lines,n=!1,r=!1,s={};for(let i=0;i<e.length;i++)if(e[i].includes("//",0))this.noHandler();else if("import 'jql:main/base.jql'"===e[i]&&(n=!0),"import 'jql:main/database.jql'"===e[i]&&(r=!0),e[i].includes("var",0)){let n,r=["getDocument","getDb","getProperty"];if(n=e[i].replace("var","").replace("=","").trim().split("'"),e[i].split("'")[0].includes("(")){let n=e[i].replace("var","").replace("=","").trim().split("'"),l=n[0].split("(")[0].split(" ")[2],o=n[0].split(" ")[0].trim(),a=[];if(r.find((e=>e===l))&&"getDocument"===l){for(let e=0;e<n.length;e++)if(n[e].includes("(")){if((t=n[e].split("(")[1].replace(",","").trim()).includes("'"))a.push(t);else{if(!s[t])throw new ReferenceError(`${t} is not defined.`);a.push(s[t])}}else{if(n[e].includes("'"))throw new ReferenceError(`${n[e]} is not defined.`);s[n[e]]?a.push(s[t]):")"===n[e]||a.push(n[e])}s[o]=this.dbGetDocUnsafeConditionRunner_(a,s,!0)}else if(r.find((e=>e===l))&&"getDb"===l){for(let e=0;e<n.length;e++)if(n[e].includes("(")){if((t=n[e].split("(")[1].replace(",","").replace(")","").trim()).includes("'"))a.push(t);else{if(!s[t])throw new ReferenceError(`${t} is not defined.`);a.push(s[t])}}else{if(n[e].includes("'"))throw new ReferenceError(`${n[e]} is not defined.`);s[n[e]]?a.push(s[t]):")"===n[e]||a.push(n[e])}s[o]=this.dbGetDbUnsafeConditionRunner_(a,s,!0)}else{if(!r.find((e=>e===l))||"getProperty"!==l)throw new Error(`${l} is not defined.`);for(let e=0;e<n.length;e++)if(n[e].includes("(")){var t;if((t=n[e].split("(")[1].replace(",","").replace(")","").trim()).includes("'"))a.push(t);else{if(!s[t])throw new ReferenceError(`${t} is not defined.`);a.push(s[t])}}else{if(n[e].includes("'"))throw new Error(`${n[e]} is not defined.`);s[n[e]]?a.push(s[t]):")"===n[e]||a.push(n[e])}a=a.filter((e=>", "!=e)),s[o]=this.dbGetPropUnsafeConditionRunner_(a,s,!0)}}else s[n[0].trim()]=n[1]}else if(e[i].includes("(")){let t,l=e[i].split("(")[0],o=e[i].replace("(","").replace(")","").replace(l,"");t=o.includes("'")?o.replace(/\'/g,""):s[o];let a="createUnsafeDB"===l&&!0===r,c="createDocument"===l&&!0===r,f="createProperty"===l&&!0===r,d="removeDocument"===l&&!0===r,h="removeDB"===l&&!0===r,p="removeProperty"===l&&!0===r,u="renameDocument"===l&&!0===r,y="renameProperty"===l&&!0===r,b="changeProperty"===l&&!0===r,D="getDocument"===l&&!0===r,S="getDb"===l&&!0===r,g="getProperty"===l&&!0===r;if("print"===l&&!0===n)void 0===t?console.log(`${o} is not defined.`):console.log(t);else if(a){let e=[" ","+","=","-","!","@","#","$","%","^","&","*","(",")","{","[","]","}","|","\\",'"',"'",";",":","?","/",".",">","<",","];const n=n=>{let r=!1;for(let s=0;s<e.length;s++)if(n.includes(e[s])){r=!0;break}return r};if(n(t))throw TypeError("Unallowed letter in the given file name.");try{fs.writeFileSync(`unsafeDb/${t}.json`,JSON.stringify({id:createId(t)}))}catch(e){console.error(e)}}else if(c){let e,n=t.split(", ")||t.split(",");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}e[n[1]]={},fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}else if(f){let e,n=t.split(", ");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler(),s[n[2]]?n[2]=s[n[2]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}const r={};r[n[2]]=n[3],e[n[1]]=r,Object.assign(e[n[1]],r);try{fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}catch(e){console.error(e)}}else if(d){let e,n=t.split(", ");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}delete e[n[1]],fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}else if(h){let e=t.split(", ");s[e[0]]?e[0]=s[e[0]]:this.noHandler();try{fs.unlinkSync(`unsafeDb/${e[0]}.json`)}catch(e){console.error(e)}}else if(p){let e,n=t.split(", ");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler(),s[n[2]]?n[2]=s[n[2]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}delete e[n[1]][n[2]];try{fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}catch(e){console.error(e)}}else if(u){let e,n=t.split(", ")||t.split(",");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler(),s[n[2]]?n[2]=s[n[2]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}let r=e[n[1]];delete e[n[1]],e[n[2]]=r;try{fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}catch(e){console.error(e)}}else if(y){let e,n=t.split(", ")||t.split(",");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler(),s[n[2]]?n[2]=s[n[2]]:this.noHandler(),s[n[3]]?n[3]=s[n[3]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}let r=e[n[1]][n[2]];delete e[n[1]][n[2]];let i={};i[n[3]]=r,Object.assign(e[n[1]],i);try{fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}catch(e){console.error(e)}}else if(b){let e,n=t.split(", ")||t.split(",");s[n[0]]?n[0]=s[n[0]]:this.noHandler(),s[n[1]]?n[1]=s[n[1]]:this.noHandler(),s[n[2]]?n[2]=s[n[2]]:this.noHandler(),s[n[3]]?n[3]=s[n[3]]:this.noHandler();try{e=JSON.parse(fs.readFileSync(`unsafeDb/${n[0]}.json`))}catch(e){console.error(e)}e[n[1]][n[2]]=n[3];try{fs.writeFileSync(`unsafeDb/${n[0]}.json`,JSON.stringify(e))}catch(e){console.error(e)}}else if(D)this.dbGetDocUnsafeConditionRunner_(t.split(", ")||t.split(","),s,!1);else if(S)this.dbGetDbUnsafeConditionRunner_(t.split(", ")||t.split(","),s,!1);else{if(!g)throw new Error(`${l} is not defined.`);this.dbGetPropUnsafeConditionRunner_(t.split(", ")||t.split(","),s,!1)}}}}module.exports=DLang;
